"""Updates profile names from TTM to be more readable"""
import math
import os
import yaml

with open("../config.yml", "r", encoding="utf8") as ymlfile:
    config = yaml.load(ymlfile, Loader=yaml.FullLoader)


def apply_rules(line):
    # Don't add combos that waste points on TS without Yogg
    if "tormented_spirits" in line and "idol_of_yoggsaron" not in line:
        return True
    # Don't add combos that waste points on Shadow Crash without Whispering Shadows  # noqa: E501
    if "shadow_crash" in line and "whispering_shadows" not in line:
        return True
    # Don't add combos that waste points on Inescapable Torment without Y'Shaarj
    # if "inescapable_torment" in line and "yshaarj" not in line:
    #     return True

    # # Make sure you are efficiently spending points
    HALF_SELECTED_MID_TALENTS = 0
    for t in [
        "maddening_touch",
        "dark_evangelism",
        "mind_devourer",
        "phantasmal_pathogen",
    ]:  # noqa: E501
        if t + ":1" in line:
            HALF_SELECTED_MID_TALENTS = HALF_SELECTED_MID_TALENTS + 1
    if HALF_SELECTED_MID_TALENTS >= 2:
        return True

    HALF_SELECTED_BOT_TALENTS = 0
    for t in ["mastermind", "screams_of_the_void", "insidious_ire"]:
        if t + ":1" in line:
            HALF_SELECTED_BOT_TALENTS = HALF_SELECTED_BOT_TALENTS + 1
    if HALF_SELECTED_BOT_TALENTS >= 2:
        return True

    # make sure you have 9+ talent points in the bottom section
    BOTTOM_TALENTS = 0
    for t in [
        "mindbender",
        "deathspeaker",
        "auspicious_spirits",
        "void_torrent",
        "inescapable_torment",
        "mastermind",
        "screams_of_the_void",
        "tormented_spirits",
        "insidious_ire",
        "malediction",
        "idol_of_yshaarj",
        "idol_of_nzoth",
        "idol_of_yoggsaron",
        "idol_of_cthun",
    ]:
        if t + ":1" in line:
            BOTTOM_TALENTS = BOTTOM_TALENTS + 1
        if t + ":2" in line:
            BOTTOM_TALENTS = BOTTOM_TALENTS + 2
    if BOTTOM_TALENTS < 9:
        return True

    # Only use Deathspeaker with Mastermind or Inescapable Torment
    if (
        "deathspeaker" in line
        and "mastermind" not in line
        and "inescapable" not in line
    ):  # noqa: E501
        return True

    # default case
    return False


def convert_builds(profile):
    OUTPUT_FILE = ""
    lines_seen = set()
    with open(profile, "r", encoding="utf8") as file:
        data = file.readlines()
        file.close()

    SIGNATURE = "# Automatically generated by ttm.py\n"
    if data[0] != SIGNATURE:
        data = [SIGNATURE] + data
    else:
        print(f"{profile} has already been generated, skipping file.")
        return

    for line in data:
        if "Solved loadout " not in line:
            if line not in lines_seen or line.isspace():
                if "profileset" in line and apply_rules(line):
                    continue
                lines_seen.add(line)
                OUTPUT_FILE = OUTPUT_FILE + line
            continue
        prefix = ""
        if "dark_ascension" in line:
            prefix = "DA"
        elif "void_eruption" in line:
            prefix = "VF"
        TALENT = prefix
        line = line.replace("Solved loadout ", TALENT + "_")
        # detect flay or spike and dr or me
        has_mind_spike = "mind_spike" in line
        has_distorted_reality = "distorted_reality" in line
        has_minds_eye = "minds_eye" in line
        # Spike or Flay
        suffix = ""
        if has_mind_spike:
            suffix += "Spike"
        else:
            suffix += "Flay"
        # ME or DR
        if has_distorted_reality:
            suffix += "_DR"
        elif has_minds_eye:
            suffix += "_ME"
        line = line.replace(" 1112", "_" + suffix)

        if apply_rules(line):
            continue

        idols = ["yshaarj", "nzoth", "yogg", "cthun"]
        IDOLS_USED = ""
        IDOLS_COUNT = 0
        for idol in idols:
            if idol in line:
                IDOLS_COUNT = IDOLS_COUNT + 1
                if len(IDOLS_USED) > 1:
                    IDOLS_USED += "_"
                IDOLS_USED += idol
        if len(IDOLS_USED) > 1:
            IDOLS_USED = "_" + IDOLS_USED
        line = line.replace(
            f'profileset."{TALENT}', f'profileset."{TALENT}{IDOLS_USED}'
        )

        # ONLY ALLOW 1+ IDOL BUILDS
        if IDOLS_COUNT > 0 and line not in lines_seen:
            lines_seen.add(line)
            OUTPUT_FILE = OUTPUT_FILE + line

    with open(profile, "w", encoding="utf8") as file:
        file.writelines(OUTPUT_FILE)
        file.close()


def duplicate_builds():
    with open("talents.simc", "r", encoding="utf8") as file:
        data = file.readlines()
        file.close()
    OUTPUT_FILE = ""
    # base file
    for line in data:
        OUTPUT_FILE = OUTPUT_FILE + line
    # TODO: make this all configurable or easily tweaked
    # duplicate all builds for minds_eye
    dr_data = data.copy()
    for line in dr_data:
        if "# Automatically generated by ttm.py" in line:
            continue
        line = line.replace("distorted_reality", "minds_eye")
        line = line.replace("_DR", "_ME")
        # add the minds eye version back into data
        data.append(line)
        OUTPUT_FILE = OUTPUT_FILE + line
    # copy both the DR and ME versions of DA into a VF data dict
    # da_data = data.copy()
    # duplicate all builds for void_eruption
    for line in data:
        if "# Automatically generated by ttm.py" in line:
            continue
        line = line.replace("dark_ascension", "void_eruption")
        line = line.replace("DA_", "VF_")
        OUTPUT_FILE = OUTPUT_FILE + line
    # replace file with new combos
    with open("talents_duplicated.simc", "w", encoding="utf8") as file:
        file.writelines(OUTPUT_FILE)
        file.close()


def make_build_files():
    with open("talents_duplicated.simc", "r", encoding="utf8") as file:
        data = file.readlines()
        file.close()
    with open("base.simc", "r", encoding="utf8") as file:
        base = file.readlines()
        file.close()
    # clear out old files
    for filename in os.listdir("builds/"):
        if os.path.isfile(os.path.join("builds/", filename)):
            os.remove(os.path.join("builds/", filename))
    # TODO make this number configurable
    batch_size = 4000
    batches = math.ceil(len(data) / batch_size)
    for batch in range(batches):
        start = 0 + (batch_size * batch)
        end = batch_size + (batch_size * batch)
        with open(f"builds/talents_{batch}.simc", "w", encoding="utf8") as file:
            file.writelines(base)
            for line in data[start:end]:
                file.write(line)
        file.close()


if __name__ == "__main__":
    convert_builds("talents.simc")
    duplicate_builds()
    make_build_files()
